.TH "D:/RobotSimulator/test/robot_society/robot society beta/Common/dxf_parse.h" 3 "화 1월 27 2015" "Version Ver 1.0.0" "Test" \" -*- nroff -*-
.ad l
.nh
.SH NAME
D:/RobotSimulator/test/robot_society/robot society beta/Common/dxf_parse.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <vector>\fP
.br

.SS "클래스"

.in +1c
.ti -1c
.RI "struct \fBDXF_ENTITY_ITEM\fP"
.br
.in -1c
.SS "열거형 타입"

.in +1c
.ti -1c
.RI "enum \fBeEntityType\fP { \fBET_NONE\fP = 0, \fBET_LINE\fP, \fBET_POINT\fP, \fBET_CIRCLE\fP, \fBET_RECT\fP }"
.br
.in -1c
.SS "함수"

.in +1c
.ti -1c
.RI "int \fBload_dxf\fP (const char *file_name, vector< \fBDXF_ENTITY_ITEM\fP > *items)"
.br
.in -1c
.SH "열거형 타입 문서화"
.PP 
.SS "enum \fBeEntityType\fP"

.PP
\fB열거형 멤버\fP
.in +1c
.TP
\fB\fIET_NONE \fP\fP
.TP
\fB\fIET_LINE \fP\fP
.TP
\fB\fIET_POINT \fP\fP
.TP
\fB\fIET_CIRCLE \fP\fP
.TP
\fB\fIET_RECT \fP\fP
.PP
dxf_parse\&.h 파일의 6 번째 라인에서 정의되었습니다\&.
.PP
.nf
6                  {
7     ET_NONE = 0,
8     ET_LINE,
9     ET_POINT,
10     ET_CIRCLE,
11     ET_RECT,
12 };
.fi
.SH "함수 문서화"
.PP 
.SS "int load_dxf (const char * file_name, vector< \fBDXF_ENTITY_ITEM\fP > * items)"

.PP
dxf_parse\&.cpp 파일의 135 번째 라인에서 정의되었습니다\&.
.PP
.nf
136 {
137     FILE *infile;
138 
139     if (!(infile = fopen(file_name, "r"))) {
140         TRACE ("DXF LD: Cannot open input file %s!", file_name);
141         return -1;
142     }
143     
144     char curobj[80] = "";   // not working on any object currently
145     int curcolor = 7;       // and it also doesn't have a color yet\&.\&.\&.
146     
147 find:   
148     while (!feof(infile)) {
149         // run file up to the "ENTITIES" section
150         char linbuf[BUFSIZE];
151         int groupcode = getline(infile, linbuf, BUFSIZE);
152         
153         if (groupcode < 0) {        
154             // get a group code and a line
155             goto stopit;
156         }
157         else if (groupcode == 0) {
158             // file section mark
159             if (strstr(linbuf, "EOF")) {
160                 goto stopit;
161             }
162             if (strstr(linbuf, "SECTION")) {
163                 char linbuf[BUFSIZE];
164                 int groupcode = getline(infile, linbuf, BUFSIZE);
165 
166                 if (groupcode < 0) {        
167                     goto stopit;
168                 }
169                 else if (groupcode != 2) {
170                     continue;
171                 }
172                 else if (strstr(linbuf, "ENTITIES")) {
173                     break;
174                 }
175             }
176         }
177     }
178     while (!feof(infile)) {     
179         // scan ENTITIES section
180         char linbuf[BUFSIZE];
181         int groupcode = getline(infile, linbuf, BUFSIZE);
182 
183         if (groupcode < 0) {        
184             // get a group code and a line
185             goto stopit;
186         }
187         else if (groupcode < 10) {  
188             // cardinal group codes
189             switch(groupcode) {
190             case 0: // start of entity, table, file sep
191                 if (strstr(linbuf, "EOF")) {
192                     writeobj(items, curobj); // dump object
193                     goto stopit;
194                 }
195                 if (strstr(linbuf, "ENDSEC")) {
196                     writeobj(items, curobj); // dump object
197                     goto find;
198                 }
199                 writeobj(items, curobj);    // dump old object
200                 curobj[0] = '\0'; // reset object
201                 curcolor = 7;
202                 strcpy(curobj, linbuf); // get new
203                 break;
204             case 1: // primary text value for entity (?)*/
205                 break;
206             case 2: // block name, attribute tag, etc
207             case 3: // other names
208             case 4:
209                 break;
210             case 5: // entity handle (hex string)
211                 break;
212             case 6: // line type name
213                 break;
214             case 7: // text style name
215                 break;
216             case 8: // layer name
217                 break;
218             case 9: // variable name ID (only in header)*/
219                 break;
220             }
221         }
222         else if (groupcode >= 10 && groupcode < 19) {
223             // Some X coord
224             sscanf(linbuf, "%f", &(xcoords[groupcode-10]));
225         }
226         else if (groupcode >= 20 && groupcode < 29) {
227             // Some Y coord
228             sscanf(linbuf, "%f", &(ycoords[groupcode-20]));
229         }
230         else if (groupcode >= 30 && groupcode < 38) {
231             // Some Z coord
232             sscanf(linbuf, "%f", &(zcoords[groupcode-30]));
233         }
234         else if (groupcode == 38) {
235             // entity elevation if nonzero
236         }
237         else if (groupcode == 39) {
238             // entity thickness if nonzero
239         }
240         else if (groupcode >= 40 && groupcode < 49) {
241             // misc floats
242             sscanf(linbuf, "%f", &(floats[groupcode-40]));
243         }
244         else if (groupcode == 49) {
245             // repeated value groups
246         }
247         else if (groupcode >= 50 && groupcode < 59) {
248             // misc angles
249             sscanf(linbuf, "%f", &(angles[groupcode-50]));
250         }
251         else if (groupcode == 62) {
252             // Color number
253             sscanf(linbuf, "%6d", &curcolor);
254         }
255         else if (groupcode == 66) {
256             // "entities follow" flag
257         }
258         else if (groupcode >= 70 && groupcode < 79) {
259             // misc ints
260             sscanf(linbuf, "%d", &(ints[groupcode-70]));
261         }
262         else if (groupcode == 210 || groupcode == 220 || groupcode == 230) {    
263             // X, Y, Z components of extrusion direction
264         }
265     }
266 
267 stopit: 
268     return 0;
269 }
.fi
.SH "작성자"
.PP 
소스 코드로부터 Test를 위해 Doxygen에 의해 자동으로 생성됨\&.
